#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 26 20:51:21 2018

@author: jl
"""

#import matplotlib.pyplot as plt
import numpy as np
from equation_syst import*
from rk4_N import*
from proy5_syst import*
import os 
from datetime import datetime
from optimization_algorithms import*
from population_generators import*


##-----initial populations ----------
#consts=[ 1.33124345,  1.38280776,  0.63663826,  1.09502921,  1.07223864,  1.85035578,
#  0.48952688,  1.97372664,  1.30917454,  0.47574336,  1.3553222,   0.6777195,
#  1.48420397, 0.48329725,  0.97262247,  0.65239167,  0.66332764,  0.47269659,
#  1.04595185,  1.13666706,  0.5650602,   0.16400187,  0.40744278,  0.06150273]

#consts=[0.38858768491797635,
#2.75758851502253899,
#0.111572529509402385,
#0.87249863843944131,
#1.57722350270764644,
#1.37794165444510064,
#0.499090370703036967,
#1.67398331435808934,
#0.346121675093056136,
#0.614838628481278016,
#0.660657606522847218,
#1.75324130290387536,
#0.0666732021057901136,
#1.97737412325991424,
#0.493462988501450983,
#0.389589592814240882,
#0.613291709402331242,
#0.754082000071398029,
#1.29796415135150411,
#0.0246258173795306512,
#0.312566689742650894,
#0.370491837176492367,
#0.527443038220578475,
#0.801502159080968113]



##Best so far 13:00--------------
#consts=[0.9805965618272299, 
#        2.312168453082978, 
#        0.31177438033335643, 
#        2, 
#        2.2202241329673269, 
#        0.36638833121957237, 
#        1.8540505320165692, 
#        0.40999442253774654, 
#        0.823131029933997, 
#        1.569807206534789, 
#        0.70401576747186851, 
#        1.217529251814963, 
#        0.10648903238837559, 
#        2, 
#        2, 
#        2, 
#        1.5867677923179291, 
#        0.83409036692837857, 
#        0.5407419124894041, 
#        0.052048002242261711, 
#        1.7383589733181717, 
#        0.40879187468119327, 
#        0.86908021027265758, 
#        0.17180960039796545]


############------------uncoment this---------------------
consts=   [1.3100000000000003,
           1.6134564954296065,
           0.23000000009979993,
           2.3100000000000023,
           2.0099999999999971,
           0.72999999999999987,
           2.2300000000000018,
           0.72999999999999998,
           0.57000000000000028,
           0.33999999999999886,
           1.3700000000000008,
           1.6400000000000006,
           1.8200000000000005,
           0.50999999999999945,
           1.2899999999999932,
           1.6199999999999994,
           1.9816617551019697,
           1.2600000000000005,
           0.8599999999999991,
           0.18299999999999991,
           1.9799999999999998,
           1.3700000000000001,
           0.24000000000000032,
           0.19199999999999992]


#consts=[1.0000000000000001, 
#        2.35534564954296068, 
#        0.28900000009979999, 
#        1.7099999999999997, 
#        2.199999999999998, 
#        0.3, 
#        1.6299999999999999, 
#        1.3, 
#        1.01, 
#        1.7800000000000009, 
#        0.8, 
#        1.0000000000000001, 
#        0.14999999999999999, 
#        2.0, 
#        2.0, 
#        2.0, 
#        2.3416617551019674, 
#        1.03, 
#        0.44000000000000006, 
#        0.073, 
#        1.72, 
#        0.63, 
#        0.62, 
#        0.080099999999999999]
        



#consts=[0.97059656182722986, 2.2221684530829777, 0.30177438033335641, 2.1000000000000001, 2.2302241329673267, 0.56638833121957233, 1.7440505320165691, 0.71999442253774648, 0.823131029933997, 1.579807206534789, 0.67401576747186853, 1.1975292518149629, 0.10648903238837559, 1.8999999999999999, 1.98, 2, 1.5967677923179291, 0.85409036692837859, 0.44074191248940409, 0.042048002242261712, 1.6283589733181716, 0.41879187468119328, 1.0690802102726575, 0.07180960039796544]
#consts=[0.99800358866125527, 0.9982639001092008, 0.99019829934866467, 2, 0.6946372201107913, 0.45540100629194036, 0.69944638929340097, 0.28160167501633848, 1.4999803235189011, 0.3621434481889958, 0.31038282725428867, 1.421612318876829, 1.2598314954174212, 2.0, 2, 0.52554531701561968, 0.35778505177238984, 1.6595031850411754, 1.4206791923222797, 1.9644485987187457, 0.88520255707121542, 0.0076325453515672104, 0.62690281431207839, 0.65539759948585408]

#consts=[0.3805965618272299, 1.8412168453082978, 0.51177438033335643, 1, 1.2202241329673269, 0.36638833121957237, 1.8540505320165692, 0.40999442253774654, 0.823131029933997, 1.569807206534789, 0.90401576747186851, 1.2217529251814963, 0.10648903238837559, 2, 1, 2, 1.5867677923179291, 0.83409036692837857, 0.7407419124894041, 0.072048002242261711, 1.7383589733181717, 0.40879187468119327, 0.86908021027265758, 0.17180960039796545]
#consts=pop_gen0_0()

#consts=pop_gen0()




###Frot eh Ox MX whatever data..................
###1st trial
#consts=[0.34236942694687567, 0.84129648515096522, 0.53813272482030172, 0.79000000000000004, 0.85609310639195957, 0.72533504105578583, 0.45400385371198748, 1.3263951660382769, 1.2244001216935694, 1.3714075454363639, 0.66249106310030159, 1.3285802124492976, 1.1735628867600418, 0.98999999999999999, 1.5200000000000005, 1.2799999999999991, 0.34282977064097098, 1.519689363230363, 0.019329463195942122, 1.4053422426470008, 1.9955433663425397, 0.7328342752460385, 0.88426112588196981, 0.41830019794143358]
#### 2nd trial 
#consts=[0.92236942694687575, 1.53129648515096526, 0.25813272482030181, 0.75000000000000011, 1.3760931063919599, 0.32533504105578592, 0.41400385371198756, 1.3863951660382769, 0.9044001216935692, 1.6114075454363641, 0.73249106310030154, 0.68858021244929735, 0.78356288676004182, 0.62000000000000022, 1.2700000000000002, 1.089999999999999, 0.16282977064097093, 1.8896893632303633, 0.69932946319594214, 1.0853422426470005, 1.7255433663425395, 1.1828342752460386, 1.0742611258819699, 0.52830019794143346]
#### 3rd trial 
#consts=[0.99236942694687569, 1.5312964851509645, 1.218132724820302, 0.68000000000000005, 2.0160931063919603, 0.075335041055785881, 0.42599614628801246, 1.9263951660382774, 0.69440012169356935, 0.85140754543636366, 1.0624910631003015, 0.94858021244929747, 0.28356288676004193, 1.8100000000000009, 1.7800000000000007, 2.0600000000000001, 0.12282977064097084, 1.7296893632303629, 0.55932946319594212, 1.5453422426470009, 0.80554336634253887, 1.9428342752460395, 1.1342611258819699, 0.37830019794143355]
population = 1
temp0 = 1
num_1 = 0
halt_crit = 'iterations'
[te, eva, pp] = sim_annealing(consts,gen_network1,fit_f,temp0,halt_crit,num_1)
x0=[0.0001,0.0001,0.0001,0.0001,0.0001,0.0001]
y=rk4_2(gen_network1,x0,pp,0,25,999)
y_n=[]

for j in range(len(y[1][0])):
        y_n.append([])

for row in y[1]:
    for j in range(len(y[1][0])):
        y_n[j].append(row[j])


file_names=['A-ox.mB','A-ox.mD','B-ox.mC','C-knockout.mA','C-ox.mA','C-ox.mD',
            'wildtype.mA','wildtype.mB','wildtype.mC','wildtype.mD']

main_folder='optimization_data'   
dirs=['/testing','/training','/validation']


##=============Read the data from a file+++++++++++++++++++++
##===================Training data
Train=[]
Train_data=[]
for name in file_names:
    imput_file=''.join([main_folder,dirs[1],'/',name,'.txt'])
    train=np.loadtxt(imput_file, skiprows=1)
    Train.append(train)
    Train_data.append([row[1] for row in train])

norm=max(max(Train_data))
print(norm) 
#norm=np.float64(1.0)
Train_data[:] = [x / norm for x in Train_data]

datafile_path =os.getcwd()
save_dir=datafile_path+'/'+str(datetime.now())+'_'+str(population)+'_'+halt_crit+str(num_1)
print(save_dir)


np.savetxt(save_dir, np.transpose(pp) , fmt='%.18g', delimiter=' ', newline=os.linesep)
print(pp)
plt.figure(1)
plt.plot(te,'-*g')
plt.xlabel(['Temperature'])
plt.ylabel(['Fitnes'])

plt.figure(2)
plt.plot(eva,'-or')

#plt.figure(2)
#plt.plot(pa,'-or')
#plt.xlabel(['Number of Generations'])
#plt.ylabel(['Fitnes'])

y_n[0]=[x*norm for x in y_n[0]]
y_n[2]=[x*norm for x in y_n[2]]
y_n[4]=[x*norm for x in y_n[4]]

plt.figure(3)
plt.plot([row[0] for row in Train[0]],[row[1] for row in Train[6]],'r-*',label='data $m_A$')
plt.plot([row[0] for row in Train[0]],[row[1] for row in Train[7]],'g-*',label='data $m_B$')
plt.plot([row[0] for row in Train[0]],[row[1] for row in Train[8]],'b-*',label='data $m_C$')
#plt.plot([row[0] for row in Train[0]],[row[1] for row in Train[9]],'m-*')
plt.plot(y[0],y_n[0],'r-',label='sim $m_A$')
plt.plot(y[0],y_n[2],'g-',label='sim $m_B$')
plt.plot(y[0],y_n[4],'b-',label='sim $m_C$')
plt.legend(bbox_to_anchor=(.75, .95), loc=2, borderaxespad=0.)
plt.ylabel('Concentration')
plt.xlabel('Time units')


plt.figure(4)
plt.plot([row[0] for row in Train[0]],[row[1] for row in Train[6]],'r-*',label='$m_A$')
plt.plot([row[0] for row in Train[0]],[row[1] for row in Train[7]],'g-*',label='$m_B$')
plt.plot([row[0] for row in Train[0]],[row[1] for row in Train[8]],'b-*',label='$m_C$')
#plt.plot([row[0] for row in Train[0]],[row[1] for row in Train[9]],'m-*')
plt.legend(bbox_to_anchor=(.75, .95), loc=2, borderaxespad=0.)
plt.ylabel('Concentration')
plt.xlabel('Time units')





plt.figure(5)
plt.plot(y[0],y_n[0],'r-',label='$m_A$')
plt.plot(y[0],y_n[2],'g-',label='$m_B$')
plt.plot(y[0],y_n[4],'b-',label='$m_C$')
plt.ylabel('Concentration')
plt.xlabel('Time units')


plt.figure(6)
plt.plot(y[0],y_n[0],'r-',label='$m_A$')
plt.plot(y[0],y_n[2],'g-',label='$m_B$')
plt.plot(y[0],y_n[4],'b-',label='$m_C$')
plt.legend(bbox_to_anchor=(.75, .95), loc=2, borderaxespad=0.)
plt.ylabel('Concentration')
plt.xlabel('Time units')
plt.legend()
plt.show()
